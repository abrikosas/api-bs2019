.libPaths()
install.packages(c("timevis", "visNetwork"))
library(jsonlite)
library(reshape2)
library(odbc)
library(DBI)
library(dplyr)
library(dbplyr)
library(magrittr)
library(igraph)
library(visNetwork)
library(lubridate)
library(stringr)
library(timevis)
con <- dbConnect(odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "WSP2312A",
Database = "jira_dc_prod1",
UID = "jira_dl_readonly",
PWD = "JRNKE82746!&@!#nejrk",
Port = 1433)
PLAN <- tbl(con, in_schema("jiraschema", "AO_D9132D_PLAN")) %>%
collect() %>%
filter(str_detect(TITLE, 'Customer Cross solutions'))
plan_id <- as.numeric(PLAN$ID)
SOLUTION <- tbl(con, in_schema("jiraschema", "AO_D9132D_SOLUTION")) %>%
select(SOLUTION, PLAN) %>%
collect() %>%
filter(str_detect(SOLUTION, '"18634"') & PLAN == plan_id)
links <- tibble()
for (i in (1:length(SOLUTION$SOLUTION))){
lastsolution <- SOLUTION$SOLUTION[i] %>%
fromJSON()
if (length(lastsolution$solution$issueDependents) > 0) {
issueDependents <- lastsolution$solution$issueDependents %>%
melt() %>%
arrange(value) %>%
rename(from = value, to = L1) %>%
mutate(type = "issueDependents", from = as.character(from))
}
# issueDependees <- lastsolution$solution$issueDependees %>%
#   melt()  %>%
#   arrange(value) %>%
#   rename(from = value, to = L1) %>%
#   mutate(type = "issueDependees", from = as.character(from))
links_temp <- lastsolution$solution$hierarchy %>%
melt() %>%
arrange(value) %>%
rename(from = value, to = L1) %>%
mutate(type = "hierarchy", from = as.character(from)) %>%
union_all(issueDependents) %>%
mutate(from = as.numeric(from), to = as.numeric(to))
links <- rbind(links, links_temp)
}
unique_issues <- c(links$from, links$to) %>%
unique()
initiatives <- tbl(con, in_schema("jiraschema", "jiraissue")) %>%
filter(PROJECT %in% c("18232", "18634", "13757") & issuetype == "10301") %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuetype")), pname, ID), by = c("issuetype" = "ID")) %>%
rename(issue_type = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuestatus")), pname, ID), by = c("issuestatus" = "ID")) %>%
rename(issue_status = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "PROJECT")), pname, ID, pkey), by = c("PROJECT" = "ID")) %>%
rename(project_name = pname, project_key = pkey.y) %>%
collect()
related <- tbl(con, in_schema("jiraschema", "jiraissue")) %>%
filter(ID %in% unique_issues) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuetype")), pname, ID), by = c("issuetype" = "ID")) %>%
rename(issue_type = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuestatus")), pname, ID), by = c("issuestatus" = "ID")) %>%
rename(issue_status = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "PROJECT")), pname, ID, pkey), by = c("PROJECT" = "ID")) %>%
rename(project_name = pname, project_key = pkey.y) %>%
collect()
bot_teams <- dbGetQuery(con, "SELECT AO_8542F1_IFJ_OBJ_JIRAISSUE.JIRA_ISSUE_ID, AO_8542F1_IFJ_OBJ.NAME
FROM jiraschema.AO_8542F1_IFJ_OBJ_JIRAISSUE
LEFT JOIN jiraschema.AO_8542F1_IFJ_OBJ ON jiraschema.AO_8542F1_IFJ_OBJ_JIRAISSUE.OBJECT_ID = jiraschema.AO_8542F1_IFJ_OBJ.ID
WHERE CUSTOM_FIELD_ID = '15798'") %>%
rename(BOT_team = NAME) %>%
mutate(JIRA_ISSUE_ID = as.numeric(JIRA_ISSUE_ID))
current_issues <- related %>%
dplyr::union(initiatives) %>%
left_join(bot_teams, by = c("ID" = "JIRA_ISSUE_ID")) %>%
dplyr::filter(issue_type %in% c("Initiative", "Epic") & !issue_status %in% c("Closed", "Done")) %>%
select(ID, PROJECT, ASSIGNEE, SUMMARY, issue_type, issue_status, project_key, issuenum, UPDATED, BOT_team)
vis.nodes <- current_issues %>%
rename(id = ID) %>%
arrange(issue_status)
vis.links <- links
vis.nodes$shape  <- ifelse(vis.nodes$issue_type != "Initiative", "text", "ellipse")
vis.nodes$value <- ifelse(vis.nodes$issue_type != "Initiative", 10, 10)
vis.nodes$group <- vis.nodes$issue_status
vis.nodes$label <- paste0(vis.nodes$project_key, '-', vis.nodes$issuenum)
vis.nodes$title  <- paste0('<a target="_blank" href="https://jira-general.sebank.se/browse/',
vis.nodes$project_key,
'-',
vis.nodes$issuenum,
'">',
vis.nodes$SUMMARY,
" | ",
vis.nodes$issue_status,
" | ",
vis.nodes$BOT_team,
" | ",
vis.nodes$ASSIGNEE,
'</a>')
# vis.nodes$label  <- vis.nodes$issue_type
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$color <- ifelse(vis.links$type != "hierarchy", "red", "black")
visnet <- visNetwork(vis.nodes, vis.links, main = "") %>%
visLayout(improvedLayout = FALSE, randomSeed = 666) %>%
visGroups(groupname = "Inbox", color = "#C0C0C0") %>%
visGroups(groupname = "Open", color = "#C0C0C0") %>%
visGroups(groupname = "To Do", color = "#3CB371") %>%
visGroups(groupname = "Preparation", color = "#00FA9A") %>%
visGroups(groupname = "Analysis", color = "#00FF00") %>%
visGroups(groupname = "Ok to develop", color = "#66CDAA") %>%
visGroups(groupname = "On Hold", color = "#F08080") %>%
visGroups(groupname = "In Progress", color = "#7FFF00") %>%
visGroups(groupname = "Ready for Development", color = "#90EE90") %>%
visGroups(groupname = "Ready For Deployment", color = "#7FFF00") %>%
visGroups(groupname = "Acceptance testing", color = "#FFFF00") %>%
visGroups(groupname = "Backlog", color = "#C0C0C0") %>%
visLegend(useGroups = TRUE, position = "left", width = 0.22, ncol = 2, stepX = 180) %>%
visNodes(shape = "circle", shadow = TRUE,
scaling = list(label = list(enabled = T)),
color=list(background="gray",
highlight="orange",
border="black")) %>%
visEdges(arrows = "to") %>%
visPhysics(stabilization = FALSE) %>%
visOptions(width = "1000",
height = "800",
highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE, useLabels = TRUE),
selectedBy = list(variable = "BOT_team", multiple = TRUE, main = "Select BOT team:"),
collapse = list(enabled = TRUE)) %>%
visPhysics(stabilization = FALSE) %>%
visPhysics(solver = "forceAtlas2Based") %>%
visEdges(smooth = FALSE)
# visSave(visnet, "C:\\Users\\s87535\\Desktop\\git\\jira-dependencies\\jira_graph.html", background = "white")
visSave(visnet, "/srv/shiny-server/JIRA_dependencies/jira_graph.html", selfcontained = FALSE, background = "white")
dates <- lastsolution$solution$baselineDates %>%
melt() %>%
spread(L2, value) %>%
mutate(ID = as.numeric(L1))
dates$end <- as_date(as.POSIXlt(dates$end/1e3, tz="GMT", origin="1970-01-01"))
dates$start <- as_date(as.POSIXlt(dates$start/1e3, tz="GMT", origin="1970-01-01"))
with_dates <- current_issues %>%
left_join(dates, by = c("ID" = "ID")) %>%
mutate(link = paste0("https://jira-general.sebank.se/browse/", project_key, '-', issuenum)) %>%
filter(issue_type == "Initiative") %>%
select(ID, SUMMARY, link, start, end, BOT_team) %>%
filter(!is.na(start)) %>%
rename(content = SUMMARY, group = BOT_team)
groups <- data.frame(id = unique(with_dates$group), content = unique(with_dates$group))
timeline <- timevis(with_dates, groups, fit = TRUE, width = 1200)
htmlwidgets::saveWidget(timeline, "C:\\Users\\s87535\\Desktop\\git\\jira-dependencies\\CCS_timeline.html", selfcontained = F)
htmlwidgets::saveWidget(timeline, "/srv/shiny-server/JIRA_dependencies/CCS_timeline.html", selfcontained = F)
con <- dbConnect(odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "WSP2312A",
Database = "jira_dc_prod1",
UID = "jira_dl_readonly",
PWD = "JRNKE82746!&@!#nejrk",
Port = 1433)
PLAN <- tbl(con, in_schema("jiraschema", "AO_D9132D_PLAN")) %>%
collect() %>%
filter(str_detect(TITLE, 'Customer Cross solutions'))
plan_id <- as.numeric(PLAN$ID)
SOLUTION <- tbl(con, in_schema("jiraschema", "AO_D9132D_SOLUTION")) %>%
select(SOLUTION, PLAN) %>%
collect() %>%
filter(str_detect(SOLUTION, '"18634"') & PLAN == plan_id)
SOLUTION
PLAN
PLAN <- tbl(con, in_schema("jiraschema", "AO_D9132D_PLAN")) %>%
collect() %>%
filter(str_detect(TITLE, 'Customer Cross Solutions'))
plan_id <- as.numeric(PLAN$ID)
SOLUTION <- tbl(con, in_schema("jiraschema", "AO_D9132D_SOLUTION")) %>%
select(SOLUTION, PLAN) %>%
collect() %>%
filter(str_detect(SOLUTION, '"18634"') & PLAN == plan_id)
PLAN <- tbl(con, in_schema("jiraschema", "AO_D9132D_PLAN")) %>%
collect()
PLAN
PLAN$TITLE
PLAN$ID
PLAN$PROGRAM_ID
PLAN
PLAN$TITLE
PLAN <- tbl(con, in_schema("jiraschema", "AO_D9132D_PLAN")) %>%
collect() %>%
filter(str_detect(TITLE, 'Information Portfolio'))
PLAN
PLAN$CREATOR_ID
SOLUTION <- tbl(con, in_schema("jiraschema", "AO_D9132D_SOLUTION")) %>%
select(SOLUTION, PLAN) %>%
collect() %>%
filter(str_detect(SOLUTION, '"18634"'))
SOLUTION
SOLUTION <- tbl(con, in_schema("jiraschema", "AO_D9132D_SOLUTION")) %>%
select(SOLUTION, PLAN) %>%
collect() %>%
filter(str_detect(SOLUTION, '"18634"')) %>%
tail(1)
links <- tibble()
for (i in (1:length(SOLUTION$SOLUTION))){
lastsolution <- SOLUTION$SOLUTION[i] %>%
fromJSON()
if (length(lastsolution$solution$issueDependents) > 0) {
issueDependents <- lastsolution$solution$issueDependents %>%
melt() %>%
arrange(value) %>%
rename(from = value, to = L1) %>%
mutate(type = "issueDependents", from = as.character(from))
}
# issueDependees <- lastsolution$solution$issueDependees %>%
#   melt()  %>%
#   arrange(value) %>%
#   rename(from = value, to = L1) %>%
#   mutate(type = "issueDependees", from = as.character(from))
links_temp <- lastsolution$solution$hierarchy %>%
melt() %>%
arrange(value) %>%
rename(from = value, to = L1) %>%
mutate(type = "hierarchy", from = as.character(from)) %>%
union_all(issueDependents) %>%
mutate(from = as.numeric(from), to = as.numeric(to))
links <- rbind(links, links_temp)
}
unique_issues <- c(links$from, links$to) %>%
unique()
initiatives <- tbl(con, in_schema("jiraschema", "jiraissue")) %>%
filter(PROJECT %in% c("18232", "18634", "13757") & issuetype == "10301") %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuetype")), pname, ID), by = c("issuetype" = "ID")) %>%
rename(issue_type = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuestatus")), pname, ID), by = c("issuestatus" = "ID")) %>%
rename(issue_status = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "PROJECT")), pname, ID, pkey), by = c("PROJECT" = "ID")) %>%
rename(project_name = pname, project_key = pkey.y) %>%
collect()
SOLUTION
related <- tbl(con, in_schema("jiraschema", "jiraissue")) %>%
filter(ID %in% unique_issues) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuetype")), pname, ID), by = c("issuetype" = "ID")) %>%
rename(issue_type = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "issuestatus")), pname, ID), by = c("issuestatus" = "ID")) %>%
rename(issue_status = pname) %>%
left_join(select(tbl(con, in_schema("jiraschema", "PROJECT")), pname, ID, pkey), by = c("PROJECT" = "ID")) %>%
rename(project_name = pname, project_key = pkey.y) %>%
collect()
bot_teams <- dbGetQuery(con, "SELECT AO_8542F1_IFJ_OBJ_JIRAISSUE.JIRA_ISSUE_ID, AO_8542F1_IFJ_OBJ.NAME
FROM jiraschema.AO_8542F1_IFJ_OBJ_JIRAISSUE
LEFT JOIN jiraschema.AO_8542F1_IFJ_OBJ ON jiraschema.AO_8542F1_IFJ_OBJ_JIRAISSUE.OBJECT_ID = jiraschema.AO_8542F1_IFJ_OBJ.ID
WHERE CUSTOM_FIELD_ID = '15798'") %>%
rename(BOT_team = NAME) %>%
mutate(JIRA_ISSUE_ID = as.numeric(JIRA_ISSUE_ID))
current_issues <- related %>%
dplyr::union(initiatives) %>%
left_join(bot_teams, by = c("ID" = "JIRA_ISSUE_ID")) %>%
dplyr::filter(issue_type %in% c("Initiative", "Epic") & !issue_status %in% c("Closed", "Done")) %>%
select(ID, PROJECT, ASSIGNEE, SUMMARY, issue_type, issue_status, project_key, issuenum, UPDATED, BOT_team)
vis.nodes <- current_issues %>%
rename(id = ID) %>%
arrange(issue_status)
vis.links <- links
vis.nodes
vis.nodes <- current_issues %>%
rename(id = ID) %>%
arrange(issue_status)
vis.links <- links
vis.nodes$shape  <- ifelse(vis.nodes$issue_type != "Initiative", "text", "ellipse")
vis.nodes$value <- ifelse(vis.nodes$issue_type != "Initiative", 10, 10)
vis.nodes$group <- vis.nodes$issue_status
vis.nodes$label <- paste0(vis.nodes$project_key, '-', vis.nodes$issuenum)
vis.nodes$title  <- paste0('<a target="_blank" href="https://jira-general.sebank.se/browse/',
vis.nodes$project_key,
'-',
vis.nodes$issuenum,
'">',
vis.nodes$SUMMARY,
" | ",
vis.nodes$issue_status,
" | ",
vis.nodes$BOT_team,
" | ",
vis.nodes$ASSIGNEE,
'</a>')
# vis.nodes$label  <- vis.nodes$issue_type
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$color <- ifelse(vis.links$type != "hierarchy", "red", "black")
visnet <- visNetwork(vis.nodes, vis.links, main = "") %>%
visLayout(improvedLayout = FALSE, randomSeed = 666) %>%
visGroups(groupname = "Inbox", color = "#C0C0C0") %>%
visGroups(groupname = "Open", color = "#C0C0C0") %>%
visGroups(groupname = "To Do", color = "#3CB371") %>%
visGroups(groupname = "Preparation", color = "#00FA9A") %>%
visGroups(groupname = "Analysis", color = "#00FF00") %>%
visGroups(groupname = "Ok to develop", color = "#66CDAA") %>%
visGroups(groupname = "On Hold", color = "#F08080") %>%
visGroups(groupname = "In Progress", color = "#7FFF00") %>%
visGroups(groupname = "Ready for Development", color = "#90EE90") %>%
visGroups(groupname = "Ready For Deployment", color = "#7FFF00") %>%
visGroups(groupname = "Acceptance testing", color = "#FFFF00") %>%
visGroups(groupname = "Backlog", color = "#C0C0C0") %>%
visLegend(useGroups = TRUE, position = "left", width = 0.22, ncol = 2, stepX = 180) %>%
visNodes(shape = "circle", shadow = TRUE,
scaling = list(label = list(enabled = T)),
color=list(background="gray",
highlight="orange",
border="black")) %>%
visEdges(arrows = "to") %>%
visPhysics(stabilization = FALSE) %>%
visOptions(width = "1000",
height = "800",
highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE, useLabels = TRUE),
selectedBy = list(variable = "BOT_team", multiple = TRUE, main = "Select BOT team:"),
collapse = list(enabled = TRUE)) %>%
visPhysics(stabilization = FALSE) %>%
visPhysics(solver = "forceAtlas2Based") %>%
visEdges(smooth = FALSE)
visSave(visnet, "/srv/shiny-server/JIRA_dependencies/jira_graph.html", selfcontained = FALSE, background = "white")
dates <- lastsolution$solution$baselineDates %>%
melt() %>%
spread(L2, value) %>%
mutate(ID = as.numeric(L1))
visSave(visnet, "C:\\git\\jira-dependencies\\jira_graph.html", background = "white")
links_temp
install.packages("mlflow")
library(mlflow)
library(glmnet)
setwd("C:/git/mlflow-example-master")
# Read the wine-quality csv file
data <- read.csv("wine-quality.csv")
# Split the data into training and test sets. (0.75, 0.25) split.
sampled <- sample(1:nrow(data), 0.75 * nrow(data))
train <- data[sampled, ]
test <- data[-sampled, ]
# The predicted column is "quality" which is a scalar from [3, 9]
train_x <- as.matrix(train[, !(names(train) == "quality")])
test_x <- as.matrix(test[, !(names(train) == "quality")])
train_y <- train[, "quality"]
test_y <- test[, "quality"]
alpha <- mlflow_param("alpha", 0.5, "numeric")
lambda <- mlflow_param("lambda", 0.5, "numeric")
with(mlflow_start_run(), {
model <- glmnet(train_x, train_y, alpha = alpha, lambda = lambda, family = "gaussian")
predictor <- crate(~ glmnet::predict.glmnet(model, as.matrix(.x)), model)
predicted <- predictor(test_x)
rmse <- sqrt(mean((predicted - test_y) ^ 2))
mae <- mean(abs(predicted - test_y))
r2 <- as.numeric(cor(predicted, test_y) ^ 2)
message("Elasticnet model (alpha=", alpha, ", lambda=", lambda, "):")
message("  RMSE: ", rmse)
message("  MAE: ", mae)
message("  R2: ", r2)
mlflow_log_param("alpha", alpha)
mlflow_log_param("lambda", lambda)
mlflow_log_metric("rmse", rmse)
mlflow_log_metric("r2", r2)
mlflow_log_metric("mae", mae)
mlflow_log_model(predictor, "model")
})
install_mlflow()
install_mlflow()
with(mlflow_start_run(), {
model <- glmnet(train_x, train_y, alpha = alpha, lambda = lambda, family = "gaussian")
predictor <- crate(~ glmnet::predict.glmnet(model, as.matrix(.x)), model)
predicted <- predictor(test_x)
rmse <- sqrt(mean((predicted - test_y) ^ 2))
mae <- mean(abs(predicted - test_y))
r2 <- as.numeric(cor(predicted, test_y) ^ 2)
message("Elasticnet model (alpha=", alpha, ", lambda=", lambda, "):")
message("  RMSE: ", rmse)
message("  MAE: ", mae)
message("  R2: ", r2)
mlflow_log_param("alpha", alpha)
mlflow_log_param("lambda", lambda)
mlflow_log_metric("rmse", rmse)
mlflow_log_metric("r2", r2)
mlflow_log_metric("mae", mae)
mlflow_log_model(predictor, "model")
})
mlflow_ui()
mlflow::mlflow_install()
mlflow_install()
install.packages("RMariaDB")
library(RMariaDB)
library(DBI)
con <- dbConnect(RMariaDB::MariaDB(), user = "root", db = "seb")
con <- dbConnect(RMariaDB::MariaDB(), user = "root", password = "seb", db = "seb")
con <- dbConnect(RMariaDB::MariaDB(), user = "root", password = "seb", db = "seb")
dbSendQuery(con, "drop table seb.game_info")
dbSendQuery(con, "create table seb.game_info (
id INT NOT NULL AUTO_INCREMENT,
name VARCHAR(200) NULL,
token VARCHAR(200),
fuel INT,
battery INT,
tires INT,
turbo_charger INT,
pithole INT,
barrier INT,
ip VARCHAR(50),
PRIMARY KEY (id))")
install.packages("textutils")
library(httr)
library(tidyverse)
library(textutils)
library(DBI)
library(RMariaDB)
setwd("C:/git/api-bs2019/scripts")
questions_df <- readRDS("questions.rds")
setwd("C:/git/api-bs2019/scripts")
questions_df <- questions_df %>%
mutate(id = row_number()) %>%
select(id, category, difficulty, question, correct_answer)
dbSendQuery(con, "drop table seb.questions")
dbWriteTable(con, "questions", questions_df, append = TRUE)
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
# con <- dbConnect(RMariaDB::MariaDB(), user = "root", db = "seb")
con <- dbConnect(RMariaDB::MariaDB(), user = "root", password = seb, db = "seb")
# con <- dbConnect(RMariaDB::MariaDB(), user = "root", db = "seb")
con <- dbConnect(RMariaDB::MariaDB(), user = "root", password = "seb", db = "seb")
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body)
library(httr)
body = '{
"pc_id":0,
"speed":0.6
}
'
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body)
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body)
GET("http://127.0.0.1:9000/api/config")
GET("http://127.0.0.1:9000/api/config", content_type_json())
a <- GET("http://127.0.0.1:9000/api/config", content_type_json())
a
a$headers
a$content
a$request
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "text")
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "text")
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
a <- GET("http://127.0.0.1:9000/api/config", content_type_json())
a
a$content
a <- GET("http://127.0.0.1:9000/api/config", content_type_json(), encode = "json")
a$content
a
a$status_code
a$headers
a$all_headers
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
a <- GET("http://127.0.0.1:9000/api/config", content_type_json(), encode = "json")
a
a$request
a$headers
body = '{
"pc_id":a,
"speed":0.6
}
'
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
body = '{
"pc_id":0,
"speed":0.6
}
'
body = '{
"pc_id":0,
"speed":99
}
'
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
body = '{
"pc_id":0,
"speed":0.6
}
'
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
library(httr)
body = '{
"pc_id":0,
"speed":0.6
}
'
POST("http://127.0.0.1:9000/api/config", content_type_json(), body = body, encode = "json")
a <- GET("http://127.0.0.1:9000/api/config", content_type_json(), encode = "json")
body
toJSON(body)
library(jsonlite)
toJSON(body)
fromJSON(body)
aa <- fromJSON(body)
a
aa
list(pc_id = 0, speed = 0)
response <- list(pc_id = 0, speed = 0)
response
speed_params <- list(pc_id = 0, speed = 0)
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
pc_id <- 1
pc_id <- 1
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
plumber::plumb(file='C:/git/api-bs2019/API/bs.R')$run()
